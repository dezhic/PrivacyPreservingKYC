pragma circom 2.0.0;

include "../circomlib/circuits/bitify.circom";

/*
    DID encoding:
        A DID is encoded to a bit array of length didByteLength*8
    issuedCred encoding:
        issuedCred = [DID_I, DID_HI], a concatenation of two DID bits
*/
template GenerateZkKYCToken(didByteLength) {
    signal input issuedCred[2*didByteLength*8];  // Credential issued by Issuer, containing DID_I and DID_HI
    signal input sigS;      // Issuer's signature on sha256(issuedCred) (S part of EdDSA signature)
    signal input sigR[2];   // Issuer's signature on sha256(issuedCred) (R part of EdDSA signature)
    signal input issuerPubKey[2];  // Issuer's public key for signature verification

    signal input didHV[didByteLength*8];
    signal input didV[didByteLength*8];

    signal input govPubKey[2];  // Government's public key for encryption

    // Encryption parameters
    signal input symKeyPointX;  // x-coordinate of symKey babyjub encoding point
    signal input symKeyXmXor;  // XOR of symKey and the x-coordinate of symKeyPoint
    signal input r;       // random number r for ElGamal

    signal output c1[2];
    signal output c2[2];

    signal hash;

    /* Step 1: Verify Issuer's signature on the issuedCred hash */

    /* Step 2: Create an encrypted token that contains (issuedCred, DID_HV, DID_V) */
    /* Step 2.1 Encrypt (issuedCred, DID_HV, DID_V) with symKey using AES */
    // compute symKey by `symKeyPointX XOR symKeyXmXor`

    /* Step 2.2 Encrypt symKeyPointX using ElGamal encryption */




}

/* public inputs:
 * - govPubKey: showing that the government is able to decrypt the token
   - symKeyXmXor: for government to obtain the symKey by `symKeyPointX XOR symKeyXmXor`
   - issuerPubKey: to convince verifier that the encrypted token contains the correct DID_I, DID_HI, which will be used to find the Issuer to retrieve the real identity of the Holding
   - didHV: for the verifier to make sure the token is generated by the Holder & prevent replay attack
   - didV: for the verifier to make sure the token is only for the Verifier & prevent replay attack
*/
component main {public[govPubKey, symKeyXmXor, issuerPubKey, didHV, didV]} = GenerateZkKYCToken();
